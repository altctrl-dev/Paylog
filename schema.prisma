generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int                     @id @default(autoincrement())
  email                    String                  @unique
  full_name                String
  password_hash            String
  role                     String                  @default("standard_user")
  is_active                Boolean                 @default(true)
  created_at               DateTime                @default(now())
  updated_at               DateTime                @updatedAt
  activity_logs            ActivityLog[]           @relation("ActivityLogger")
  deleted_attachments      InvoiceAttachment[]     @relation("AttachmentDeleter")
  uploaded_attachments     InvoiceAttachment[]     @relation("AttachmentUploader")
  deleted_comments         InvoiceComment[]        @relation("CommentDeleter")
  comments                 InvoiceComment[]        @relation("CommentAuthor")
  created_invoices         Invoice[]               @relation("InvoiceCreator")
  hidden_invoices          Invoice[]               @relation("InvoiceHider")
  held_invoices            Invoice[]               @relation("InvoiceHolder")
  rejected_invoices        Invoice[]               @relation("InvoiceRejector")
  created_requests         MasterDataRequest[]     @relation("RequestRequester")
  reviewed_master_requests MasterDataRequest[]     @relation("RequestReviewer")
  granted_visibilities     UserProfileVisibility[] @relation("VisibilityGranter")
  profile_visibilities     UserProfileVisibility[] @relation("UserProfileAccess")

  @@index([role, is_active], map: "idx_users_role_active")
  @@index([role], map: "idx_users_super_admin")
  @@map("users")
}

model InvoiceProfile {
  id               Int                     @id @default(autoincrement())
  name             String
  description      String?
  visible_to_all   Boolean                 @default(true)
  created_at       DateTime                @default(now())
  updated_at       DateTime                @updatedAt
  entity_id        Int
  vendor_id        Int
  category_id      Int
  currency_id      Int
  prepaid_postpaid String?                 @db.VarChar(10)
  tds_applicable   Boolean                 @default(false)
  tds_percentage   Float?
  category         Category                @relation(fields: [category_id], references: [id], onUpdate: NoAction, map: "fk_invoice_profiles_category")
  currency         Currency                @relation(fields: [currency_id], references: [id], onUpdate: NoAction, map: "fk_invoice_profiles_currency")
  entity           Entity                  @relation(fields: [entity_id], references: [id], onUpdate: NoAction, map: "fk_invoice_profiles_entity")
  vendor           Vendor                  @relation(fields: [vendor_id], references: [id], onUpdate: NoAction, map: "fk_invoice_profiles_vendor")
  invoices         Invoice[]
  visibilities     UserProfileVisibility[]

  @@index([category_id], map: "idx_invoice_profiles_category")
  @@index([currency_id], map: "idx_invoice_profiles_currency")
  @@index([entity_id], map: "idx_invoice_profiles_entity")
  @@index([vendor_id], map: "idx_invoice_profiles_vendor")
  @@map("invoice_profiles")
}

model UserProfileVisibility {
  id         Int            @id @default(autoincrement())
  user_id    Int
  profile_id Int
  granted_by Int
  granted_at DateTime       @default(now())
  granter    User           @relation("VisibilityGranter", fields: [granted_by], references: [id])
  profile    InvoiceProfile @relation(fields: [profile_id], references: [id], onDelete: Cascade)
  user       User           @relation("UserProfileAccess", fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, profile_id], name: "unique_user_profile")
  @@index([user_id], map: "idx_user_profile_visibility_user")
  @@index([profile_id], map: "idx_user_profile_visibility_profile")
  @@index([granted_by], map: "idx_user_profile_visibility_granted_by")
  @@map("user_profile_visibility")
}

model Vendor {
  id               Int              @id @default(autoincrement())
  name             String
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  address          String?
  gst_exemption    Boolean          @default(false)
  bank_details     String?
  invoice_profiles InvoiceProfile[]
  invoices         Invoice[]

  @@map("vendors")
}

model Category {
  id               Int              @id @default(autoincrement())
  name             String
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  description      String
  invoice_profiles InvoiceProfile[]
  invoices         Invoice[]

  @@map("categories")
}

model SubEntity {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  invoices    Invoice[]

  @@map("sub_entities")
}

model PaymentType {
  id                 Int       @id @default(autoincrement())
  name               String
  description        String?
  requires_reference Boolean   @default(false)
  is_active          Boolean   @default(true)
  created_at         DateTime  @default(now())
  updated_at         DateTime  @updatedAt
  payments           Payment[]

  @@map("payment_types")
}

model Invoice {
  id                 Int                 @id @default(autoincrement())
  invoice_number     String              @unique
  vendor_id          Int
  category_id        Int?
  profile_id         Int?
  invoice_amount     Float
  invoice_date       DateTime?
  due_date           DateTime?
  period_start       DateTime?
  period_end         DateTime?
  tds_applicable     Boolean             @default(false)
  tds_percentage     Float?
  sub_entity_id      Int?
  notes              String?
  status             String              @default("pending_approval")
  hold_reason        String?
  hold_by            Int?
  hold_at            DateTime?
  submission_count   Int                 @default(1)
  last_submission_at DateTime            @default(now())
  rejection_reason   String?
  rejected_by        Int?
  rejected_at        DateTime?
  is_hidden          Boolean             @default(false)
  hidden_by          Int?
  hidden_at          DateTime?
  hidden_reason      String?
  created_by         Int
  created_at         DateTime            @default(now())
  updated_at         DateTime            @updatedAt
  currency_id        Int?
  entity_id          Int?
  activity_logs      ActivityLog[]
  attachments        InvoiceAttachment[]
  comments           InvoiceComment[]
  category           Category?           @relation(fields: [category_id], references: [id])
  creator            User                @relation("InvoiceCreator", fields: [created_by], references: [id])
  currency           Currency?           @relation(fields: [currency_id], references: [id], onUpdate: NoAction)
  entity             Entity?             @relation(fields: [entity_id], references: [id], onUpdate: NoAction)
  hider              User?               @relation("InvoiceHider", fields: [hidden_by], references: [id], onDelete: Restrict)
  holder             User?               @relation("InvoiceHolder", fields: [hold_by], references: [id], onDelete: Restrict)
  profile            InvoiceProfile?     @relation(fields: [profile_id], references: [id])
  rejector           User?               @relation("InvoiceRejector", fields: [rejected_by], references: [id], onDelete: Restrict)
  sub_entity         SubEntity?          @relation(fields: [sub_entity_id], references: [id])
  vendor             Vendor              @relation(fields: [vendor_id], references: [id])
  payments           Payment[]

  @@index([status], map: "idx_invoices_status")
  @@index([status], map: "idx_invoices_on_hold")
  @@index([is_hidden], map: "idx_invoices_hidden")
  @@index([is_hidden], map: "idx_invoices_active")
  @@index([submission_count], map: "idx_invoices_submission_count")
  @@index([created_at], map: "idx_invoices_created_at")
  @@index([sub_entity_id], map: "idx_invoices_sub_entity")
  @@index([currency_id], map: "idx_invoices_currency")
  @@index([entity_id], map: "idx_invoices_entity")
  @@map("invoices")
}

model Payment {
  id              Int          @id @default(autoincrement())
  invoice_id      Int
  payment_type_id Int?
  amount_paid     Float
  payment_date    DateTime
  payment_method  String?
  status          String       @default("pending")
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
  invoice         Invoice      @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  payment_type    PaymentType? @relation(fields: [payment_type_id], references: [id])

  @@index([invoice_id], map: "idx_payments_invoice")
  @@index([payment_type_id], map: "idx_payments_type")
  @@index([status], map: "idx_payments_status")
  @@index([payment_date], map: "idx_payments_date")
  @@map("payments")
}

model MasterDataRequest {
  id                  Int                 @id @default(autoincrement())
  entity_type         String
  status              String              @default("draft")
  requester_id        Int
  request_data        String
  reviewer_id         Int?
  reviewed_at         DateTime?
  rejection_reason    String?
  admin_edits         String?
  admin_notes         String?
  resubmission_count  Int                 @default(0)
  previous_attempt_id Int?
  superseded_by_id    Int?
  created_entity_id   String?
  created_at          DateTime            @default(now())
  updated_at          DateTime            @updatedAt
  previous_attempt    MasterDataRequest?  @relation("RequestResubmission", fields: [previous_attempt_id], references: [id])
  resubmissions       MasterDataRequest[] @relation("RequestResubmission")
  requester           User                @relation("RequestRequester", fields: [requester_id], references: [id])
  reviewer            User?               @relation("RequestReviewer", fields: [reviewer_id], references: [id], onDelete: Restrict)
  superseded_by       MasterDataRequest?  @relation("RequestSupersession", fields: [superseded_by_id], references: [id])
  supersedes          MasterDataRequest[] @relation("RequestSupersession")

  @@index([entity_type, status], map: "idx_master_data_requests_type_status")
  @@index([requester_id], map: "idx_master_data_requests_requester")
  @@index([reviewer_id], map: "idx_master_data_requests_reviewer")
  @@index([status], map: "idx_master_data_requests_status")
  @@index([created_at], map: "idx_master_data_requests_created_at")
  @@map("master_data_requests")
}

model InvoiceAttachment {
  id            String    @id @default(cuid())
  invoice_id    Int
  file_name     String
  original_name String
  file_size     Int
  mime_type     String
  storage_path  String
  uploaded_by   Int
  uploaded_at   DateTime  @default(now())
  deleted_at    DateTime?
  deleted_by    Int?
  scan_status   String?
  scan_result   String?
  deleter       User?     @relation("AttachmentDeleter", fields: [deleted_by], references: [id], onDelete: Restrict)
  invoice       Invoice   @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  uploader      User      @relation("AttachmentUploader", fields: [uploaded_by], references: [id])

  @@index([invoice_id, deleted_at], map: "idx_attachments_invoice_active")
  @@index([uploaded_by], map: "idx_attachments_uploader")
  @@index([uploaded_at], map: "idx_attachments_time")
  @@map("invoice_attachments")
}

model InvoiceComment {
  id         String    @id @default(cuid())
  invoice_id Int
  user_id    Int
  content    String
  is_edited  Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?
  deleted_by Int?
  deleter    User?     @relation("CommentDeleter", fields: [deleted_by], references: [id], onDelete: Restrict)
  invoice    Invoice   @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  author     User      @relation("CommentAuthor", fields: [user_id], references: [id])

  @@index([invoice_id, deleted_at], map: "idx_comments_invoice_active")
  @@index([user_id], map: "idx_comments_author")
  @@index([created_at], map: "idx_comments_time")
  @@map("invoice_comments")
}

model ActivityLog {
  id         String   @id @default(cuid())
  invoice_id Int
  user_id    Int?
  action     String
  old_data   String?
  new_data   String?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  invoice    Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  user       User?    @relation("ActivityLogger", fields: [user_id], references: [id])

  @@index([invoice_id, created_at], map: "idx_activity_invoice_time")
  @@index([user_id], map: "idx_activity_user")
  @@index([action], map: "idx_activity_action")
  @@index([created_at], map: "idx_activity_time")
  @@map("activity_logs")
}

model SchemaMigration {
  id             Int      @id @default(autoincrement())
  migration_name String   @unique
  applied_at     DateTime @default(now())
  description    String?

  @@map("schema_migrations")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Currency {
  id               Int              @id @default(autoincrement())
  code             String           @unique @db.VarChar(3)
  name             String           @db.VarChar(255)
  symbol           String           @db.VarChar(10)
  is_active        Boolean          @default(false)
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime         @default(now()) @db.Timestamp(6)
  invoice_profiles InvoiceProfile[]
  invoices         Invoice[]

  @@index([code], map: "idx_currencies_code")
  @@map("currencies")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model Entity {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(255)
  description      String?
  address          String
  country          String           @db.VarChar(2)
  is_active        Boolean          @default(true)
  created_at       DateTime         @default(now()) @db.Timestamp(6)
  updated_at       DateTime         @default(now()) @db.Timestamp(6)
  invoice_profiles InvoiceProfile[]
  invoices         Invoice[]

  @@index([country], map: "idx_entities_country")
  @@index([name], map: "idx_entities_name")
  @@map("entities")
}
